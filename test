from decimal import Decimal

from datetime import datetime as dt   # Импортируйте необходимые модули

FORMAT = '%H:%M:%S'     # Запишите формат полученного времени.
WEIGHT = 75             # Вес.
HEIGHT = 175            # Рост.
K_1 = 0.035             # Коэффициент для подсчета калорий.
K_2 = 0.029             # Коэффициент для подсчета калорий.
STEP_M = 0.65           # Длина шага в метрах.

storage_data = {}       # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""

    # Если длина пакета отлична от 2.
    # или один из элементов пакета имеет пустое значение.
    if len(data) != 2 or None in data:   
                                          
        return False                      
    
    return True

    
def check_correct_time(time): 

    """Проверка корректности параметра времени."""

    # Если словарь для хранения не пустой.
    # Значение <= самому большому значению ключа в словаре.
    # функция вернет False.
    # Иначе - True

    if storage_data and time <= max(storage_data):     
        return False
        
    return True                                   
    

def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""

    # Подсчитает шаги в словаре storage_data.
    # К результату добавит значение из последнего пакета.
    # Возвращает эту сумму.
    steps = sum(storage_data.values())
    return steps                
        

def get_distance(steps):
    """Получить дистанцию пройденного пути в км."""

    # Определяет дистанцию из количества шагов и длины шага.     
    steps = STEP_M * steps / 1000
    return steps    
    
   
def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""

    # В уроке «Последовательности» вы написали формулу расчета калорий.
    # Перенесите её сюда и верните результат расчётов.
    # Для расчётов вам потребуется значение времени; 
    # получите его из объекта current_time;
    # переведите часы и минуты в часы, в значение типа float.
    
    mean_speed = dist / current_time.hour
    minutes = current_time.hour * 60 + current_time.minute
    calories = (K_1 * WEIGHT 
                + (mean_speed**2 / HEIGHT) * K_2 * WEIGHT) * minutes
    return calories


def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    
    if dist >= 6.5:
        return 'Отличный результат! Цель достигнута.'
    
    elif dist >= 3.9:
        return 'Неплохо! День был продуктивным.'

    elif dist >2:
        return 'Маловато, но завтра наверстаем!'

    elif dist < 2:
        return 'Лежать тоже полезно. Главное — участие, а не победа!'

    
def show_message(current, day_steps, dist, spent_calories, achievement):
    
    print (f'''
Время: {current}.
Количество шагов за сегодня: {day_steps}.
Дистанция составила {dist:.2f} км.
Вы сожгли {spent_calories:.2f} ккал.
{achievement}
''')
    return current, dist   
    
    
    
def accept_package(data):
    """Обработать пакет данных."""
    
    correct_data = data
    check_correct_data(data)

    if check_correct_data(data) == False:           # Если функция проверки пакета вернет False
        
        return 'Некорректный пакет'
    
    #print (correct_data)    # ok
    pack_time, pack_steps = correct_data      # Распакуйте полученные =
    
    pack_time = dt.strptime(pack_time, FORMAT).time()    # Преобразуйте строку с временем в объект типа time.
    #print (pack_time)    #ok
    #print (pack_steps)   #ok
        
    check_correct = pack_time
    check_correct_time(check_correct)

    if  check_correct_time(check_correct) == False:      # Если функция проверки значения времени вернет False
        return 'Некорректное значение времени'

    
    storage_data [pack_time] = pack_steps   # Добавьте новый элемент в словарь storage_data.
    #print (storage_data) #ok
    
    
    step_day = pack_steps
    get_step_day(step_day)   
   # print (get_step_day(step_day))  # ok


    day_steps = get_step_day(step_day)                    # Запишите результат подсчёта пройденных шагов.
    
    distance = day_steps
    dist = (get_distance(distance))                       # Запишите результат расчёта пройденной дистанции.
    #print (f'{dist:.2f} км')    # ok
    
    
    current = pack_time
    spent_calories = get_spent_calories(dist, current)    # Запишите результат расчёта сожжённых калорий.    
    #print (f'{spent_calories:.2f} Kkal.')   # ok 
    
    achievement = get_achievement(dist)
    #print (get_achievement(dist))       # ok
    
    show_message(current, day_steps, dist, spent_calories, achievement)
    
    
    return  storage_data
    
    
package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)


accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)  




